#!/usr/bin/env perl
# Usage:
# $ lazytest [markdown-files...] > test.sh
# $ bash test.sh || echo 'uh oh, something failed'
#
# Looks specifically for ```bash, not ```sh. So you have the option to fence
# with just ```sh if you want syntax highlighting but no test coverage.

use strict;
use warnings;

print <<'EOF';
#!/bin/bash
lazytest_n=0
lazytest_fail=0
lazytest_case() {
  local actual="$(eval "$1"; echo "[exit code $?]")"
  local expected="$(cat <&3; echo "[exit code $?]")"
  lazytest_n=$((lazytest_n + 1))
  if [[ "$actual" = "$expected" ]]; then
    echo -ne '\r\033[J'; echo "$1" | tr '\n' ' ' | head -c79
    return 0
  else
    lazytest_fail=$((lazytest_fail + 1))
    echo -e "\r\033[J\033[1;31mFAIL\033[0;0m $*"
    echo -e "EXPECTED\033[1;34m"
    echo    "$expected"
    echo
    echo -e "\033[0;0mACTUAL\033[1;34m"
    echo    "$actual"
    echo -e "\033[0;0m"
    return 1
  fi
}
lazytest_end() {
  if ((lazytest_fail)); then
    echo -e "\r\033[J\033[1;31m$lazytest_n tests, $lazytest_fail failed\033[0;0m"
  else
    echo -e "\r\033[J\033[1;32m$lazytest_n tests run, all passed\033[0;0m"
  fi
}
cat <<'LAZYTEST_EOF'
EOF

while (<>) {
  next unless (/^\`\`\`bash/../^\`\`\`$/) && !/^\`\`\`/;

  if (s/^\$\s+//) {
    # We've got a shell command, so read it along with any heredocs we have.
    # Assume all multiline strings are single-quoted, and that an odd number of
    # single-quotes means that we're still inside a string.
    print "LAZYTEST_EOF\n";
    $_ .= <> while /\\$/ || 1 & length s/[^']//gr;

    # At this point we've appended our heredoc to the test wrapper, so we
    # should be all set. Look for previous heredocs and scan forwards until
    # they end -- that way we won't break the test case for things like this:
    #
    # $ rev <<'EOF'
    # foo
    # $ bar
    # bif
    # EOF
    # oof
    # rab $
    # fib

    if (/\<\<'?(\w+)'?/) {
      my $hd = $1;
      $_ .= <> until /\n$hd\n$/;
    }

    print "lazytest_case '" . s/'/'\\''/gr . "' 3<<'LAZYTEST_EOF'\n";
  } else {
    print;
  }
}

print "LAZYTEST_EOF\n";
print "lazytest_end\n";
